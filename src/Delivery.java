//Є N клієнтів, яким компанія-виробник має доставити товар. Скільки є можливих маршрутів доставлення товару з
// урахуванням того, що товар доставлятиме одна машина? Використовуючи IntelliJ IDEA, створіть клас Delivery.
// Напишіть програму, яка розраховуватиме та виводитиме на екран кількість можливих варіантів доставлення товару.
// Для розв'язку задачі, використовуйте факторіал N!, що розраховується рекурсією. Поясніть, чому не рекомендується
// використовувати рекурсію для розрахунку факторіала. Вкажіть слабкі місця цього підходу.

import java.util.Scanner;

public class Delivery {
    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);
        System.out.println("Для розрахунку наявних маршрутів введіть кількість клієнтів: ");
        int client = sc.nextInt();
        int route = factorial(client);

        System.out.println("Для доставки товару пропонується " + route + " варіантів маршрутів");
    }

    public static int factorial(int N) {

        if (N >= 1) {
            return N * factorial(N - 1);
        } else {
            return 1;
        }
    }
}

//Рекурсію не бажано використовувати оскільки вона забирає дуже багато памяті.

//Подібно до того, як цикли можуть зіткнутися з проблемою нескінченного циклу,
//рекурсивні функції можуть зіткнутися з проблемою нескінченної рекурсії.
//Нескінченна рекурсія — це коли функція ніколи не припиняє викликати саму себе.
//Кожна рекурсивна функція повинна мати умову зупинки, яка є умовою, коли функція
//припиняє викликати саму себе.

